// Copyright 2022 gorse Project Authors
// Copyright 2023 Roman Atachiants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/kelindar/gocc/internal/asm"
	"github.com/kelindar/gocc/internal/config"
	"modernc.org/cc/v3"
)

var supportedTypes = mapset.NewSet("int64_t", "uint64_t", "long", "float")

type TranslateUnit struct {
	Arch       *config.Arch
	Source     string
	Assembly   string
	Object     string
	GoAssembly string
	Go         string
	Package    string
	Options    []string
	Offset     int
}

func NewTranslateUnit(arch *config.Arch, source string, outputDir string, options ...string) TranslateUnit {
	sourceExt := filepath.Ext(source)
	noExtSourcePath := source[:len(source)-len(sourceExt)]
	noExtSourceBase := filepath.Base(noExtSourcePath)
	return TranslateUnit{
		Arch:       arch,
		Source:     source,
		Assembly:   noExtSourcePath + ".s",
		Object:     noExtSourcePath + ".o",
		GoAssembly: filepath.Join(outputDir, noExtSourceBase+".s"),
		Go:         filepath.Join(outputDir, noExtSourceBase+".go"),
		Package:    filepath.Base(outputDir),
		Options:    options,
	}
}

// parseSource parse C source file and extract functions declarations.
func (t *TranslateUnit) parseSource() ([]asm.Function, error) {
	// List include paths.
	includePaths, err := listIncludePaths()
	if err != nil {
		return nil, err
	}

	source, err := t.fixSource(t.Source)
	if err != nil {
		return nil, err
	}

	ast, err := cc.Parse(&cc.Config{}, nil, includePaths,
		[]cc.Source{{Name: t.Source, Value: source}})
	if err != nil {
		return nil, err
	}

	var functions []asm.Function
	for _, nodes := range ast.Scope {
		if len(nodes) != 1 || nodes[0].Position().Filename != t.Source {
			continue
		}
		node := nodes[0]
		if declarator, ok := node.(*cc.Declarator); ok {
			funcIdent := declarator.DirectDeclarator
			if funcIdent.Case != cc.DirectDeclaratorFuncParam {
				continue
			}

			if function, err := t.convertFunction(funcIdent); err != nil {
				return nil, err
			} else {
				functions = append(functions, function)
			}
		}
	}
	sort.Slice(functions, func(i, j int) bool {
		return functions[i].Position < functions[j].Position
	})
	return functions, nil
}

func (t *TranslateUnit) generateGoStubs(functions []asm.Function) error {
	// generate code
	var builder strings.Builder
	builder.WriteString(t.Arch.BuildTags)
	builder.WriteString("// AUTO-GENERATED BY GOCC -- DO NOT EDIT\n\n")
	builder.WriteString(fmt.Sprintf("package %v\n\n", t.Package))
	builder.WriteString("import \"unsafe\"\n")
	for _, function := range functions {
		/*builder.WriteString("\n//go:noescape,nosplit\n")
		builder.WriteString(fmt.Sprintf("func %v(%s unsafe.Pointer)\n",
			function.Name, strings.Join(function.Parameters, ", ")))*/
		builder.WriteString(function.String())
	}

	// write file
	f, err := os.Create(t.Go)
	if err != nil {
		return err
	}
	defer func(f *os.File) {
		if err = f.Close(); err != nil {
			_, _ = fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}
	}(f)
	_, err = f.WriteString(builder.String())
	return err
}

// compile compiles the C source file to assembly and then to object.
func (t *TranslateUnit) compile(args ...string) error {
	args = append(args, "-mno-red-zone", "-mstackrealign", "-mllvm", "-inline-threshold=1000",
		"-fno-asynchronous-unwind-tables", "-fno-exceptions", "-fno-rtti", "-ffast-math")
	args = append(args, t.Arch.ClangFlags...)

	clang, err := resolveClang()
	if err != nil {
		return err
	}

	// Compile to assembly first
	if _, err := runCommand(clang, append([]string{"-S", "-c", t.Source, "-o", t.Assembly}, args...)...); err != nil {
		return err
	}

	// Use clang to compile to object
	_, err = runCommand(clang, append([]string{"-c", t.Assembly, "-o", t.Object}, args...)...)
	return err
}

func (t *TranslateUnit) Translate() error {
	functions, err := t.parseSource()
	if err != nil {
		return err
	}

	if err := t.generateGoStubs(functions); err != nil {
		return err
	}
	if err := t.compile(t.Options...); err != nil {
		return err
	}

	assembly, err := asm.ParseAssembly(t.Arch, t.Assembly)
	if err != nil {
		return err
	}

	disassembler := append(t.Arch.Disassembler, "-d", t.Object)
	dump, err := runCommand(disassembler[0], disassembler[1:]...)
	if err != nil {
		return err
	}

	if err = asm.ParseObjectDump(t.Arch, dump, assembly); err != nil {
		return err
	}

	for i, v := range assembly {
		functions[i].Lines = v.Lines
	}
	return asm.Generate(t.Arch, t.GoAssembly, functions)
}

// fixSource fixes compile errors in source.
func (t *TranslateUnit) fixSource(path string) (string, error) {
	bytes, err := os.ReadFile(path)
	if err != nil {
		return "", err
	}

	var builder strings.Builder
	switch t.Arch.Name {
	case "amd64":
		t.Offset = -1
		builder.WriteString("#define __STDC_HOSTED__ 1\n")
		builder.Write(bytes)
		return builder.String(), nil

	case "arm64":
		var clauseCount int
		for _, line := range strings.Split(string(bytes), "\n") {
			switch {
			case strings.HasPrefix(line, "#include"):
				// Do nothing
			case strings.Contains(line, "{"):
				if clauseCount == 0 {
					builder.WriteString(line[:strings.Index(line, "{")+1])
				}
				clauseCount++
			case strings.Contains(line, "}"):
				clauseCount--
				if clauseCount == 0 {
					builder.WriteString(line[strings.Index(line, "}"):])
				}
			case clauseCount == 0:
				builder.WriteString(line)
			}

			builder.WriteRune('\n')
		}
		return builder.String(), nil
	default:
		return "", fmt.Errorf("unsupported arch: %s", t.Arch.Name)
	}
}

// convertFunction extracts the function definition from cc.DirectDeclarator.
func (t *TranslateUnit) convertFunction(declarator *cc.DirectDeclarator) (asm.Function, error) {
	params, err := t.convertFunctionParameters(declarator.ParameterTypeList.ParameterList)
	if err != nil {
		return asm.Function{}, err
	}

	return asm.Function{
		Name:       declarator.DirectDeclarator.Token.Value.String(),
		Position:   declarator.Position().Line,
		Parameters: params,
	}, nil
}

// convertFunctionParameters extracts function parameters from cc.ParameterList.
func (t *TranslateUnit) convertFunctionParameters(params *cc.ParameterList) ([]asm.Param, error) {
	declaration := params.ParameterDeclaration
	isPointer := declaration.Declarator.Pointer != nil

	// If it's a const, go deeper
	specifier := declaration.DeclarationSpecifiers
	if q := specifier.TypeQualifier; q != nil && q.Case == cc.TypeQualifierConst {
		specifier = specifier.DeclarationSpecifiers
	}

	paramName := declaration.Declarator.DirectDeclarator.Token.Value
	paramType := specifier.TypeSpecifier.Token.Value
	if !isPointer && !supportedTypes.Contains(paramType.String()) {
		position := declaration.Position()
		return nil, fmt.Errorf("%v:%v:%v: error: unsupported type: %v\n",
			position.Filename, position.Line+t.Offset, position.Column, paramType)
	}

	paramNames := []asm.Param{{
		Name:      paramName.String(),
		Type:      paramType.String(),
		IsPointer: isPointer,
	}}

	if params.ParameterList != nil {
		if nextParamNames, err := t.convertFunctionParameters(params.ParameterList); err != nil {
			return nil, err
		} else {
			paramNames = append(paramNames, nextParamNames...)
		}
	}
	return paramNames, nil
}

// resolveClang resolves clang compiler to use.
func resolveClang() (string, error) {
	clangVersions := []string{"clang", "clang-17", "clang-16", "clang-15", "clang-14", "clang-13", "clang-12", "clang-11", "clang-10"}
	for _, clang := range clangVersions {
		if _, err := exec.LookPath(clang); err == nil {
			return clang, nil
		}
	}
	return "", fmt.Errorf(`clang compiler not found, install using \n bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"`)
}
