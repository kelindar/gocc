// Copyright 2022 gorse Project Authors
// Copyright 2023 Roman Atachiants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/kelindar/gocc/internal/asm"
	"github.com/kelindar/gocc/internal/cc"
	"github.com/kelindar/gocc/internal/config"
)

type TranslateUnit struct {
	Arch       *config.Arch
	Source     string
	Assembly   string
	Object     string
	GoAssembly string
	Go         string
	Package    string
	Options    []string
	Offset     int
}

func NewTranslateUnit(arch *config.Arch, source string, outputDir string, options ...string) TranslateUnit {
	sourceExt := filepath.Ext(source)
	noExtSourcePath := source[:len(source)-len(sourceExt)]
	noExtSourceBase := filepath.Base(noExtSourcePath)
	return TranslateUnit{
		Arch:       arch,
		Source:     source,
		Assembly:   fmt.Sprintf("%s.s", noExtSourcePath),
		Object:     fmt.Sprintf("%s.o", noExtSourcePath),
		GoAssembly: filepath.Join(outputDir, fmt.Sprintf("%s.s", noExtSourceBase)),
		Go:         filepath.Join(outputDir, fmt.Sprintf("%s.go", noExtSourceBase)),
		Package:    filepath.Base(outputDir),
		Options:    options,
	}
}

func (t *TranslateUnit) generateGoStubs(functions []asm.Function) error {
	// generate code
	var builder strings.Builder
	builder.WriteString(t.Arch.BuildTags)
	builder.WriteString("// AUTO-GENERATED BY GOCC -- DO NOT EDIT\n\n")
	builder.WriteString(fmt.Sprintf("package %v\n\n", t.Package))
	builder.WriteString("import \"unsafe\"\n")
	for _, function := range functions {
		builder.WriteString(function.String())
	}

	// write file
	f, err := os.Create(t.Go)
	if err != nil {
		return err
	}
	defer func(f *os.File) {
		if err = f.Close(); err != nil {
			_, _ = fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}
	}(f)
	_, err = f.WriteString(builder.String())
	return err
}

// compile compiles the C source file to assembly and then to object.
func (t *TranslateUnit) compile(args ...string) error {
	clang, err := cc.NewCompiler(t.Arch)
	if err != nil {
		return err
	}

	return clang.Compile(t.Source, t.Assembly, t.Object, args...)
}

func (t *TranslateUnit) Translate() error {
	functions, err := cc.Parse(t.Source)
	if err != nil {
		return err
	}

	if err := t.generateGoStubs(functions); err != nil {
		return err
	}
	if err := t.compile(t.Options...); err != nil {
		return err
	}

	assembly, err := asm.ParseAssembly(t.Arch, t.Assembly)
	if err != nil {
		return err
	}

	disassembler := append(t.Arch.Disassembler, "-d", t.Object)
	dump, err := runCommand(disassembler[0], disassembler[1:]...)
	if err != nil {
		return err
	}

	if err = asm.ParseObjectDump(t.Arch, dump, assembly); err != nil {
		return err
	}

	for i, v := range assembly {
		functions[i].Lines = v.Lines
	}
	return asm.Generate(t.Arch, t.GoAssembly, functions)
}
