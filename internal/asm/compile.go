// Copyright 2022 gorse Project Authors
// Copyright 2023 Roman Atachiants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package asm

import (
	"fmt"
	"os"
	"strings"

	"github.com/kelindar/gocc/internal/config"
	"github.com/klauspost/asmfmt"
)

// Generate generates the Go PLAN9 assembly
func Generate(arch *config.Arch, functions []Function) ([]byte, error) {
	var builder strings.Builder
	builder.WriteString(arch.BuildTags)
	builder.WriteString("// AUTO-GENERATED BY GOCC -- DO NOT EDIT\n")
	for _, function := range functions {
		for _, c := range function.Consts {
			builder.WriteString(c.Compile(arch))
		}

		builder.WriteString(fmt.Sprintf("\nTEXT Â·%v(SB), $0-32\n", function.Name))
		for i, param := range function.Params {
			builder.WriteString(fmt.Sprintf("\t%s %s+%d(FP), %s\n", arch.CallOp, param.Name, i*8, arch.Registers[i]))
		}
		for _, line := range function.Lines {
			builder.WriteString(line.Compile(arch))
		}
	}

	return asmfmt.Format(strings.NewReader(builder.String()))
}

// GenerateFile generates the Go PLAN9 assembly file
func GenerateFile(arch *config.Arch, path string, functions []Function) error {
	bytes, err := Generate(arch, functions)
	if err != nil {
		return err
	}

	return os.WriteFile(path, bytes, os.ModePerm)
}
