//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT
DATA LCPI0_0<>+0x0000(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0002(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0004(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0006(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0008(SB)/2, $0x00ff
DATA LCPI0_0<>+0x000a(SB)/2, $0x00ff
DATA LCPI0_0<>+0x000c(SB)/2, $0x00ff
DATA LCPI0_0<>+0x000e(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0010(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0012(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0014(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0016(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0018(SB)/2, $0x00ff
DATA LCPI0_0<>+0x001a(SB)/2, $0x00ff
DATA LCPI0_0<>+0x001c(SB)/2, $0x00ff
DATA LCPI0_0<>+0x001e(SB)/2, $0x00ff
GLOBL LCPI0_0<>(SB), (8+16), $32

TEXT Â·uint8_avx2_mul(SB), $0-32
	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ size+24(FP), CX
	BYTE $0x55               // push	rbp
	WORD $0x8948; BYTE $0xe5 // mov	rbp, rsp
	LONG $0xf8e48348         // and	rsp, -8
	WORD $0xc985             // test	ecx, ecx
	JLE  LBB0_18
	WORD $0x8941; BYTE $0xc8 // mov	r8d, ecx
	LONG $0x10f88349         // cmp	r8, 16
	JAE  LBB0_3
	WORD $0x3145; BYTE $0xc9 // xor	r9d, r9d

LBB0_14:
	WORD $0x2944; BYTE $0xc9 // sub	ecx, r9d
	WORD $0x894d; BYTE $0xca // mov	r10, r9
	WORD $0xf749; BYTE $0xd2 // not	r10
	WORD $0x014d; BYTE $0xc2 // add	r10, r8
	LONG $0x03e18348         // and	rcx, 3
	JE   LBB0_16

LBB0_15:
	LONG $0x04b60f42; BYTE $0x0e // movzx	eax, byte ptr [rsi + r9]
	LONG $0x0f24f642             // mul	byte ptr [rdi + r9]
	LONG $0x0a048842             // mov	byte ptr [rdx + r9], al
	WORD $0xff49; BYTE $0xc1     // inc	r9
	WORD $0xff48; BYTE $0xc9     // dec	rcx
	JNE  LBB0_15

LBB0_16:
	LONG $0x03fa8349 // cmp	r10, 3
	JB   LBB0_18

LBB0_17:
	LONG $0x04b60f42; BYTE $0x0e   // movzx	eax, byte ptr [rsi + r9]
	LONG $0x0f24f642               // mul	byte ptr [rdi + r9]
	LONG $0x0a048842               // mov	byte ptr [rdx + r9], al
	LONG $0x44b60f42; WORD $0x010e // movzx	eax, byte ptr [rsi + r9 + 1]
	LONG $0x0f64f642; BYTE $0x01   // mul	byte ptr [rdi + r9 + 1]
	LONG $0x0a448842; BYTE $0x01   // mov	byte ptr [rdx + r9 + 1], al
	LONG $0x44b60f42; WORD $0x020e // movzx	eax, byte ptr [rsi + r9 + 2]
	LONG $0x0f64f642; BYTE $0x02   // mul	byte ptr [rdi + r9 + 2]
	LONG $0x0a448842; BYTE $0x02   // mov	byte ptr [rdx + r9 + 2], al
	LONG $0x44b60f42; WORD $0x030e // movzx	eax, byte ptr [rsi + r9 + 3]
	LONG $0x0f64f642; BYTE $0x03   // mul	byte ptr [rdi + r9 + 3]
	LONG $0x0a448842; BYTE $0x03   // mov	byte ptr [rdx + r9 + 3], al
	LONG $0x04c18349               // add	r9, 4
	WORD $0x394d; BYTE $0xc8       // cmp	r8, r9
	JNE  LBB0_17

LBB0_18:
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_3:
	WORD $0x8948; BYTE $0xd0                   // mov	rax, rdx
	WORD $0x2948; BYTE $0xf8                   // sub	rax, rdi
	WORD $0x3145; BYTE $0xc9                   // xor	r9d, r9d
	LONG $0x00803d48; WORD $0x0000             // cmp	rax, 128
	JB   LBB0_14
	WORD $0x8948; BYTE $0xd0                   // mov	rax, rdx
	WORD $0x2948; BYTE $0xf0                   // sub	rax, rsi
	LONG $0x00803d48; WORD $0x0000             // cmp	rax, 128
	JB   LBB0_14
	LONG $0x80f88141; WORD $0x0000; BYTE $0x00 // cmp	r8d, 128
	JAE  LBB0_7
	WORD $0x3145; BYTE $0xc9                   // xor	r9d, r9d
	JMP  LBB0_11

LBB0_7:
	WORD $0x8941; BYTE $0xca // mov	r10d, ecx
	LONG $0x7fe28341         // and	r10d, 127
	WORD $0x894d; BYTE $0xc1 // mov	r9, r8
	WORD $0x294d; BYTE $0xd1 // sub	r9, r10
	WORD $0xc031             // xor	eax, eax
	QUAD $0x00000000056ffdc5 // vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_0]

LBB0_8:
	LONG $0x1c6ffec5; BYTE $0x07   // vmovdqu	ymm3, ymmword ptr [rdi + rax]
	LONG $0x646ffec5; WORD $0x2007 // vmovdqu	ymm4, ymmword ptr [rdi + rax + 32]
	LONG $0x6c6ffec5; WORD $0x4007 // vmovdqu	ymm5, ymmword ptr [rdi + rax + 64]
	LONG $0x4c6ffec5; WORD $0x6007 // vmovdqu	ymm1, ymmword ptr [rdi + rax + 96]
	LONG $0x346ffec5; BYTE $0x06   // vmovdqu	ymm6, ymmword ptr [rsi + rax]
	LONG $0x7c6ffec5; WORD $0x2006 // vmovdqu	ymm7, ymmword ptr [rsi + rax + 32]
	LONG $0x446f7ec5; WORD $0x4006 // vmovdqu	ymm8, ymmword ptr [rsi + rax + 64]
	LONG $0x546ffec5; WORD $0x6006 // vmovdqu	ymm2, ymmword ptr [rsi + rax + 96]
	LONG $0xcb6865c5               // vpunpckhbw	ymm9, ymm3, ymm3
	LONG $0xd6684dc5               // vpunpckhbw	ymm10, ymm6, ymm6
	LONG $0xd52d41c4; BYTE $0xc9   // vpmullw	ymm9, ymm10, ymm9
	LONG $0xc8db35c5               // vpand	ymm9, ymm9, ymm0
	LONG $0xdb60e5c5               // vpunpcklbw	ymm3, ymm3, ymm3
	LONG $0xf660cdc5               // vpunpcklbw	ymm6, ymm6, ymm6
	LONG $0xdbd5cdc5               // vpmullw	ymm3, ymm6, ymm3
	LONG $0xd8dbe5c5               // vpand	ymm3, ymm3, ymm0
	LONG $0x6765c1c4; BYTE $0xd9   // vpackuswb	ymm3, ymm3, ymm9
	LONG $0xf468ddc5               // vpunpckhbw	ymm6, ymm4, ymm4
	LONG $0xcf6845c5               // vpunpckhbw	ymm9, ymm7, ymm7
	LONG $0xf6d5b5c5               // vpmullw	ymm6, ymm9, ymm6
	LONG $0xf0dbcdc5               // vpand	ymm6, ymm6, ymm0
	LONG $0xe460ddc5               // vpunpcklbw	ymm4, ymm4, ymm4
	LONG $0xff60c5c5               // vpunpcklbw	ymm7, ymm7, ymm7
	LONG $0xe4d5c5c5               // vpmullw	ymm4, ymm7, ymm4
	LONG $0xe0dbddc5               // vpand	ymm4, ymm4, ymm0
	LONG $0xe667ddc5               // vpackuswb	ymm4, ymm4, ymm6
	LONG $0xf568d5c5               // vpunpckhbw	ymm6, ymm5, ymm5
	LONG $0x683dc1c4; BYTE $0xf8   // vpunpckhbw	ymm7, ymm8, ymm8
	LONG $0xf6d5c5c5               // vpmullw	ymm6, ymm7, ymm6
	LONG $0xf0dbcdc5               // vpand	ymm6, ymm6, ymm0
	LONG $0xed60d5c5               // vpunpcklbw	ymm5, ymm5, ymm5
	LONG $0x603dc1c4; BYTE $0xf8   // vpunpcklbw	ymm7, ymm8, ymm8
	LONG $0xedd5c5c5               // vpmullw	ymm5, ymm7, ymm5
	LONG $0xe8dbd5c5               // vpand	ymm5, ymm5, ymm0
	LONG $0xee67d5c5               // vpackuswb	ymm5, ymm5, ymm6
	LONG $0xf168f5c5               // vpunpckhbw	ymm6, ymm1, ymm1
	LONG $0xfa68edc5               // vpunpckhbw	ymm7, ymm2, ymm2
	LONG $0xf6d5c5c5               // vpmullw	ymm6, ymm7, ymm6
	LONG $0xf0dbcdc5               // vpand	ymm6, ymm6, ymm0
	LONG $0xc960f5c5               // vpunpcklbw	ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw	ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw	ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand	ymm1, ymm1, ymm0
	LONG $0xce67f5c5               // vpackuswb	ymm1, ymm1, ymm6
	LONG $0x1c7ffec5; BYTE $0x02   // vmovdqu	ymmword ptr [rdx + rax], ymm3
	LONG $0x647ffec5; WORD $0x2002 // vmovdqu	ymmword ptr [rdx + rax + 32], ymm4
	LONG $0x6c7ffec5; WORD $0x4002 // vmovdqu	ymmword ptr [rdx + rax + 64], ymm5
	LONG $0x4c7ffec5; WORD $0x6002 // vmovdqu	ymmword ptr [rdx + rax + 96], ymm1
	LONG $0x80e88348               // sub	rax, -128
	WORD $0x3949; BYTE $0xc1       // cmp	r9, rax
	JNE  LBB0_8
	WORD $0x854d; BYTE $0xd2       // test	r10, r10
	JE   LBB0_18
	LONG $0x10fa8341               // cmp	r10d, 16
	JB   LBB0_14

LBB0_11:
	WORD $0x894c; BYTE $0xc8 // mov	rax, r9
	WORD $0x8941; BYTE $0xca // mov	r10d, ecx
	LONG $0x0fe28341         // and	r10d, 15
	WORD $0x894d; BYTE $0xc1 // mov	r9, r8
	WORD $0x294d; BYTE $0xd1 // sub	r9, r10
	QUAD $0x00000000056ffdc5 // vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_0]

LBB0_12:
	LONG $0x307de2c4; WORD $0x070c // vpmovzxbw	ymm1, xmmword ptr [rdi + rax]
	LONG $0x307de2c4; WORD $0x0614 // vpmovzxbw	ymm2, xmmword ptr [rsi + rax]
	LONG $0xc9d5edc5               // vpmullw	ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand	ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01ca // vextracti128	xmm2, ymm1, 1
	LONG $0xca67f1c5               // vpackuswb	xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x02   // vmovdqu	xmmword ptr [rdx + rax], xmm1
	LONG $0x10c08348               // add	rax, 16
	WORD $0x3949; BYTE $0xc1       // cmp	r9, rax
	JNE  LBB0_12
	WORD $0x854d; BYTE $0xd2       // test	r10, r10
	JNE  LBB0_14
	JMP  LBB0_18
