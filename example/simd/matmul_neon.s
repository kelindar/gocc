//go:build !noasm && arm64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT ·f32_axpy(SB), $0-32
	MOVD x+0(FP), R0
	MOVD y+8(FP), R1
	MOVD size+16(FP), R2
	MOVD alpha+24(FP), R3
	LONG $0x104c2de9      // push	{r4, r10, r11, lr}
	LONG $0x08b08de2      // add	r11, sp, #8
	LONG $0x1fd0c1e7      // bfc	sp, #0, #2
	LONG $0x04c052e2      // subs	r12, r2, #4
	LONG $0x00c0d3e2      // sbcs	r12, r3, #0
	LONG $0x0e00003a      // blo	.LBB0_3
	LONG $0x400cf4f3      // vdup.32	q8, d0[0]
	LONG $0x00c0a0e3      // mov	r12, #0
	LONG $0x00e0a0e3      // mov	lr, #0
	LONG $0x0c4180e0      // add	r4, r0, r12, lsl #2
	LONG $0x8f2a64f4      // vld1.32	{d18, d19}, [r4]
	LONG $0x0c4181e0      // add	r4, r1, r12, lsl #2
	LONG $0x04c09ce2      // adds	r12, r12, #4
	LONG $0x8f4a64f4      // vld1.32	{d20, d21}, [r4]
	LONG $0x00e0aee2      // adc	lr, lr, #0
	LONG $0xf04c42f2      // vfma.f32	q10, q9, q8
	LONG $0x8f4a44f4      // vst1.32	{d20, d21}, [r4]
	LONG $0x03408ce3      // orr	r4, r12, #3
	LONG $0x024054e0      // subs	r4, r4, r2
	LONG $0x0340dee0      // sbcs	r4, lr, r3
	LONG $0xf3ffff3a      // blo	.LBB0_2
	LONG $0x030012e3      // tst	r2, #3
	LONG $0x0f00000a      // beq	.LBB0_7
	LONG $0x03c0c2e3      // bic	r12, r2, #3
	LONG $0x02e05ce0      // subs	lr, r12, r2
	LONG $0x03e0d3e0      // sbcs	lr, r3, r3
	LONG $0x0b00002a      // bhs	.LBB0_7
	LONG $0x03e0a0e1      // mov	lr, r3
	LONG $0x0c4180e0      // add	r4, r0, r12, lsl #2
	LONG $0x001a94ed      // vldr	s2, [r4]
	LONG $0x0c4181e0      // add	r4, r1, r12, lsl #2
	LONG $0x01c09ce2      // adds	r12, r12, #1
	LONG $0x002a94ed      // vldr	s4, [r4]
	LONG $0x00e0aee2      // adc	lr, lr, #0
	LONG $0x002aa1ee      // vfma.f32	s4, s2, s0
	LONG $0x002a84ed      // vstr	s4, [r4]
	LONG $0x02405ce0      // subs	r4, r12, r2
	LONG $0x0340dee0      // sbcs	r4, lr, r3
	LONG $0xf4ffff3a      // blo	.LBB0_6
	LONG $0x08d04be2      // sub	sp, r11, #8
	LONG $0x108cbde8      // pop	{r4, r10, r11, pc}

TEXT ·f32_matmul(SB), $0-32
	MOVD dst+0(FP), R0
	MOVD m+8(FP), R1
	MOVD n+16(FP), R2
	MOVD dims+24(FP), R3
	LONG $0xf04f2de9     // push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	LONG $0x1cb08de2     // add	r11, sp, #28
	LONG $0x14d04de2     // sub	sp, sp, #20
	LONG $0x1fd0c2e7     // bfc	sp, #0, #3
	LONG $0x08709be5     // ldr	r7, [r11, #8]
	LONG $0x0c008de5     // str	r0, [sp, #12]
	LONG $0x7700ffe6     // uxth	r0, r7
	LONG $0x000050e3     // cmp	r0, #0
	LONG $0x08008de5     // str	r0, [sp, #8]
	LONG $0x9d00000a     // beq	.LBB1_25
	LONG $0x0c009be5     // ldr	r0, [r11, #12]
	LONG $0x27e8a0e1     // lsr	lr, r7, #16
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x2038a0e1     // lsr	r3, r0, #16
	LONG $0x0360c3e3     // bic	r6, r3, #3
	LONG $0x060053e1     // cmp	r3, r6
	LONG $0x10608de5     // str	r6, [sp, #16]
	LONG $0x01700083     // movwhi	r7, #1
	LONG $0x036810e2     // ands	r6, r0, #196608
	LONG $0x01600013     // movwne	r6, #1
	LONG $0x00005ee3     // cmp	lr, #0
	LONG $0x9100000a     // beq	.LBB1_25
	LONG $0x077006e0     // and	r7, r6, r7
	LONG $0x010750e3     // cmp	r0, #262144
	LONG $0x3a00003a     // blo	.LBB1_12
	LONG $0x000057e3     // cmp	r7, #0
	LONG $0x6200000a     // beq	.LBB1_19
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x0060a0e3     // mov	r6, #0
	LONG $0x970300e0     // mul	r0, r7, r3
	LONG $0x04708de5     // str	r7, [sp, #4]
	LONG $0x00608de5     // str	r6, [sp]
	LONG $0x979e87e0     // umull	r9, r7, r7, lr
	LONG $0x0050a0e3     // mov	r5, #0
	LONG $0x0c709de5     // ldr	r7, [sp, #12]
	LONG $0x00a0a0e3     // mov	r10, #0
	LONG $0x006187e0     // add	r6, r7, r0, lsl #2
	LONG $0x097085e0     // add	r7, r5, r9
	LONG $0x950300e0     // mul	r0, r5, r3
	LONG $0x0080a0e3     // mov	r8, #0
	LONG $0x077181e0     // add	r7, r1, r7, lsl #2
	LONG $0x000a97ed     // vldr	s0, [r7]
	LONG $0x400cf4f3     // vdup.32	q8, d0[0]
	LONG $0x00c182e0     // add	r12, r2, r0, lsl #2
	LONG $0x0000a0e3     // mov	r0, #0
	LONG $0x00718ce0     // add	r7, r12, r0, lsl #2
	LONG $0x8f2a67f4     // vld1.32	{d18, d19}, [r7]
	LONG $0x007186e0     // add	r7, r6, r0, lsl #2
	LONG $0x040090e2     // adds	r0, r0, #4
	LONG $0x8f4a67f4     // vld1.32	{d20, d21}, [r7]
	LONG $0x0080a8e2     // adc	r8, r8, #0
	LONG $0xf04c42f2     // vfma.f32	q10, q9, q8
	LONG $0x8f4a47f4     // vst1.32	{d20, d21}, [r7]
	LONG $0x037080e3     // orr	r7, r0, #3
	LONG $0x037057e0     // subs	r7, r7, r3
	LONG $0x0070d8e2     // sbcs	r7, r8, #0
	LONG $0xf3ffff3a     // blo	.LBB1_7
	LONG $0x10009de5     // ldr	r0, [sp, #16]
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x00418ce0     // add	r4, r12, r0, lsl #2
	LONG $0x001a94ed     // vldr	s2, [r4]
	LONG $0x004186e0     // add	r4, r6, r0, lsl #2
	LONG $0x010090e2     // adds	r0, r0, #1
	LONG $0x002a94ed     // vldr	s4, [r4]
	LONG $0x0070a7e2     // adc	r7, r7, #0
	LONG $0x002aa1ee     // vfma.f32	s4, s2, s0
	LONG $0x002a84ed     // vstr	s4, [r4]
	LONG $0x034050e0     // subs	r4, r0, r3
	LONG $0x0040d7e2     // sbcs	r4, r7, #0
	LONG $0xf4ffff3a     // blo	.LBB1_9
	LONG $0x015095e2     // adds	r5, r5, #1
	LONG $0x00a0aae2     // adc	r10, r10, #0
	LONG $0x0e0055e0     // subs	r0, r5, lr
	LONG $0x0000dae2     // sbcs	r0, r10, #0
	LONG $0xd9ffff3a     // blo	.LBB1_6
	LONG $0x04709de5     // ldr	r7, [sp, #4]
	LONG $0x00609de5     // ldr	r6, [sp]
	LONG $0x08009de5     // ldr	r0, [sp, #8]
	LONG $0x017097e2     // adds	r7, r7, #1
	LONG $0x0060a6e2     // adc	r6, r6, #0
	LONG $0x000057e0     // subs	r0, r7, r0
	LONG $0x0000d6e2     // sbcs	r0, r6, #0
	LONG $0xc9ffff3a     // blo	.LBB1_5
	LONG $0x530000ea     // b	.LBB1_25
	LONG $0x000057e3     // cmp	r7, #0
	LONG $0x5100000a     // beq	.LBB1_25
	LONG $0x0080a0e3     // mov	r8, #0
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x980300e0     // mul	r0, r8, r3
	LONG $0x04708de5     // str	r7, [sp, #4]
	LONG $0x0060a0e3     // mov	r6, #0
	LONG $0x989e87e0     // umull	r9, r7, r8, lr
	LONG $0x00a0a0e3     // mov	r10, #0
	LONG $0x0c709de5     // ldr	r7, [sp, #12]
	LONG $0x000187e0     // add	r0, r7, r0, lsl #2
	LONG $0x960307e0     // mul	r7, r6, r3
	LONG $0x094086e0     // add	r4, r6, r9
	LONG $0x00c0a0e3     // mov	r12, #0
	LONG $0x044181e0     // add	r4, r1, r4, lsl #2
	LONG $0x000a94ed     // vldr	s0, [r4]
	LONG $0x074182e0     // add	r4, r2, r7, lsl #2
	LONG $0x10709de5     // ldr	r7, [sp, #16]
	LONG $0x075184e0     // add	r5, r4, r7, lsl #2
	LONG $0x001a95ed     // vldr	s2, [r5]
	LONG $0x075180e0     // add	r5, r0, r7, lsl #2
	LONG $0x017097e2     // adds	r7, r7, #1
	LONG $0x002a95ed     // vldr	s4, [r5]
	LONG $0x00c0ace2     // adc	r12, r12, #0
	LONG $0x002aa1ee     // vfma.f32	s4, s2, s0
	LONG $0x002a85ed     // vstr	s4, [r5]
	LONG $0x035057e0     // subs	r5, r7, r3
	LONG $0x0050dce2     // sbcs	r5, r12, #0
	LONG $0xf4ffff3a     // blo	.LBB1_16
	LONG $0x016096e2     // adds	r6, r6, #1
	LONG $0x00a0aae2     // adc	r10, r10, #0
	LONG $0x0e7056e0     // subs	r7, r6, lr
	LONG $0x0070dae2     // sbcs	r7, r10, #0
	LONG $0xe8ffff3a     // blo	.LBB1_15
	LONG $0x04709de5     // ldr	r7, [sp, #4]
	LONG $0x018098e2     // adds	r8, r8, #1
	LONG $0x08009de5     // ldr	r0, [sp, #8]
	LONG $0x0070a7e2     // adc	r7, r7, #0
	LONG $0x000058e0     // subs	r0, r8, r0
	LONG $0x0000d7e2     // sbcs	r0, r7, #0
	LONG $0xdaffff3a     // blo	.LBB1_14
	LONG $0x290000ea     // b	.LBB1_25
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x0060a0e3     // mov	r6, #0
	LONG $0x970300e0     // mul	r0, r7, r3
	LONG $0x10708de5     // str	r7, [sp, #16]
	LONG $0x04608de5     // str	r6, [sp, #4]
	LONG $0x979e84e0     // umull	r9, r4, r7, lr
	LONG $0x0c709de5     // ldr	r7, [sp, #12]
	LONG $0x0080a0e3     // mov	r8, #0
	LONG $0x00a0a0e3     // mov	r10, #0
	LONG $0x006187e0     // add	r6, r7, r0, lsl #2
	LONG $0x980304e0     // mul	r4, r8, r3
	LONG $0x095088e0     // add	r5, r8, r9
	LONG $0x0070a0e3     // mov	r7, #0
	LONG $0x055181e0     // add	r5, r1, r5, lsl #2
	LONG $0xbf0ce5f4     // vld1.32	{d16[], d17[]}, [r5:32]
	LONG $0x0050a0e3     // mov	r5, #0
	LONG $0x044182e0     // add	r4, r2, r4, lsl #2
	LONG $0x07c184e0     // add	r12, r4, r7, lsl #2
	LONG $0x070186e0     // add	r0, r6, r7, lsl #2
	LONG $0x8f2a6cf4     // vld1.32	{d18, d19}, [r12]
	LONG $0x047097e2     // adds	r7, r7, #4
	LONG $0x0050a5e2     // adc	r5, r5, #0
	LONG $0x8f4a60f4     // vld1.32	{d20, d21}, [r0]
	LONG $0xf04c42f2     // vfma.f32	q10, q9, q8
	LONG $0x8f4a40f4     // vst1.32	{d20, d21}, [r0]
	LONG $0x030087e3     // orr	r0, r7, #3
	LONG $0x030050e0     // subs	r0, r0, r3
	LONG $0x0000d5e2     // sbcs	r0, r5, #0
	LONG $0xf3ffff3a     // blo	.LBB1_22
	LONG $0x018098e2     // adds	r8, r8, #1
	LONG $0x00a0aae2     // adc	r10, r10, #0
	LONG $0x0e0058e0     // subs	r0, r8, lr
	LONG $0x0000dae2     // sbcs	r0, r10, #0
	LONG $0xe7ffff3a     // blo	.LBB1_21
	LONG $0x10709de5     // ldr	r7, [sp, #16]
	LONG $0x04609de5     // ldr	r6, [sp, #4]
	LONG $0x08009de5     // ldr	r0, [sp, #8]
	LONG $0x017097e2     // adds	r7, r7, #1
	LONG $0x0060a6e2     // adc	r6, r6, #0
	LONG $0x000057e0     // subs	r0, r7, r0
	LONG $0x0000d6e2     // sbcs	r0, r6, #0
	LONG $0xd7ffff3a     // blo	.LBB1_20
	LONG $0x1cd04be2     // sub	sp, r11, #28
	LONG $0xf08fbde8     // pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
