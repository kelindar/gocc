//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT ·f32_axpy(SB), $0-32
	MOVQ x+0(FP), DI
	MOVQ y+8(FP), SI
	MOVQ size+16(FP), DX
	MOVQ alpha+24(FP), CX
	BYTE $0x55                   // push	rbp
	WORD $0x8948; BYTE $0xe5     // mov	rbp, rsp
	LONG $0xf8e48348             // and	rsp, -8
	LONG $0x08fa8348             // cmp	rdx, 8
	JB   LBB0_5
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss	ymm1, xmm0
	LONG $0xf8428d48             // lea	rax, [rdx - 8]
	WORD $0x8949; BYTE $0xc0     // mov	r8, rax
	LONG $0x03e8c149             // shr	r8, 3
	WORD $0xff49; BYTE $0xc0     // inc	r8
	LONG $0x08f88348             // cmp	rax, 8
	JAE  LBB0_12
	WORD $0xc931                 // xor	ecx, ecx
	JMP  LBB0_3

LBB0_12:
	WORD $0x894c; BYTE $0xc0 // mov	rax, r8
	LONG $0xfee08348         // and	rax, -2
	WORD $0xc931             // xor	ecx, ecx

LBB0_13:
	LONG $0x1410fcc5; BYTE $0x8f               // vmovups	ymm2, ymmword ptr [rdi + 4*rcx]
	LONG $0xa875e2c4; WORD $0x8e14             // vfmadd213ps	ymm2, ymm1, ymmword ptr [rsi + 4*rcx]
	LONG $0x1411fcc5; BYTE $0x8e               // vmovups	ymmword ptr [rsi + 4*rcx], ymm2
	LONG $0x5410fcc5; WORD $0x208f             // vmovups	ymm2, ymmword ptr [rdi + 4*rcx + 32]
	LONG $0xa875e2c4; WORD $0x8e54; BYTE $0x20 // vfmadd213ps	ymm2, ymm1, ymmword ptr [rsi + 4*rcx + 32]
	LONG $0x5411fcc5; WORD $0x208e             // vmovups	ymmword ptr [rsi + 4*rcx + 32], ymm2
	LONG $0x10c18348                           // add	rcx, 16
	LONG $0xfec08348                           // add	rax, -2
	JNE  LBB0_13

LBB0_3:
	LONG $0x01c0f641               // test	r8b, 1
	JE   LBB0_5
	LONG $0x1410fcc5; BYTE $0x8f   // vmovups	ymm2, ymmword ptr [rdi + 4*rcx]
	LONG $0xa86de2c4; WORD $0x8e0c // vfmadd213ps	ymm1, ymm2, ymmword ptr [rsi + 4*rcx]
	LONG $0x0c11fcc5; BYTE $0x8e   // vmovups	ymmword ptr [rsi + 4*rcx], ymm1

LBB0_5:
	WORD $0xc2f6; BYTE $0x07       // test	dl, 7
	JE   LBB0_11
	WORD $0x8948; BYTE $0xd0       // mov	rax, rdx
	LONG $0xf8e08348               // and	rax, -8
	WORD $0x3948; BYTE $0xd0       // cmp	rax, rdx
	JAE  LBB0_11
	WORD $0x8948; BYTE $0xc1       // mov	rcx, rax
	WORD $0xf748; BYTE $0xd1       // not	rcx
	WORD $0xc2f6; BYTE $0x01       // test	dl, 1
	JE   LBB0_9
	LONG $0x0c10fac5; BYTE $0x87   // vmovss	xmm1, dword ptr [rdi + 4*rax]
	LONG $0xa979e2c4; WORD $0x860c // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax]
	LONG $0x0c11fac5; BYTE $0x86   // vmovss	dword ptr [rsi + 4*rax], xmm1
	LONG $0x01c88348               // or	rax, 1

LBB0_9:
	WORD $0x0148; BYTE $0xd1 // add	rcx, rdx
	JE   LBB0_11

LBB0_10:
	LONG $0x0c10fac5; BYTE $0x87               // vmovss	xmm1, dword ptr [rdi + 4*rax]
	LONG $0xa979e2c4; WORD $0x860c             // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax]
	LONG $0x0c11fac5; BYTE $0x86               // vmovss	dword ptr [rsi + 4*rax], xmm1
	LONG $0x4c10fac5; WORD $0x0487             // vmovss	xmm1, dword ptr [rdi + 4*rax + 4]
	LONG $0xa979e2c4; WORD $0x864c; BYTE $0x04 // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax + 4]
	LONG $0x4c11fac5; WORD $0x0486             // vmovss	dword ptr [rsi + 4*rax + 4], xmm1
	LONG $0x02c08348                           // add	rax, 2
	WORD $0x3948; BYTE $0xd0                   // cmp	rax, rdx
	JB   LBB0_10

LBB0_11:
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

TEXT ·f32_matmul(SB), $0-32
	MOVQ dst+0(FP), DI
	MOVQ m+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ dims+24(FP), CX
	BYTE $0x55                             // push	rbp
	WORD $0x8948; BYTE $0xe5               // mov	rbp, rsp
	WORD $0x5741                           // push	r15
	WORD $0x5641                           // push	r14
	WORD $0x5541                           // push	r13
	WORD $0x5441                           // push	r12
	BYTE $0x53                             // push	rbx
	LONG $0xf8e48348                       // and	rsp, -8
	LONG $0x38ec8348                       // sub	rsp, 56
	LONG $0x24548948; BYTE $0x08           // mov	qword ptr [rsp + 8], rdx
	LONG $0x244c8948; BYTE $0x18           // mov	qword ptr [rsp + 24], rcx
	WORD $0x8948; BYTE $0xc8               // mov	rax, rcx
	LONG $0xffff2548; WORD $0x0000         // and	rax, 65535
	LONG $0x24448948; BYTE $0x28           // mov	qword ptr [rsp + 40], rax
	JE   LBB1_29
	LONG $0x24448b48; BYTE $0x18           // mov	rax, qword ptr [rsp + 24]
	WORD $0x8941; BYTE $0xc1               // mov	r9d, eax
	LONG $0x10e9c141                       // shr	r9d, 16
	WORD $0x8949; BYTE $0xc4               // mov	r12, rax
	LONG $0x30ecc149                       // shr	r12, 48
	QUAD $0x000000000000b948; WORD $0x0007 // movabs	rcx, 1970324836974592
	WORD $0x8548; BYTE $0xc8               // test	rax, rcx
	WORD $0x950f; BYTE $0xc1               // setne	cl
	WORD $0x8945; BYTE $0xe3               // mov	r11d, r12d
	LONG $0xf8e38341                       // and	r11d, -8
	WORD $0x394d; BYTE $0xdc               // cmp	r12, r11
	WORD $0x970f; BYTE $0xc2               // seta	dl
	WORD $0x854d; BYTE $0xc9               // test	r9, r9
	JE   LBB1_29
	WORD $0xd120                           // and	cl, dl
	LONG $0x24548b48; BYTE $0x18           // mov	rdx, qword ptr [rsp + 24]
	LONG $0x33eac148                       // shr	rdx, 51
	JE   LBB1_20
	WORD $0xc984                           // test	cl, cl
	JE   LBB1_4
	WORD $0x894d; BYTE $0xdd               // mov	r13, r11
	LONG $0x01cd8349                       // or	r13, 1
	QUAD $0x00000000a5048d4a               // lea	rax, [4*r12]
	LONG $0x24448948; BYTE $0x10           // mov	qword ptr [rsp + 16], rax
	WORD $0x3145; BYTE $0xff               // xor	r15d, r15d
	WORD $0x8948; BYTE $0xfb               // mov	rbx, rdi
	LONG $0x24748948; BYTE $0x30           // mov	qword ptr [rsp + 48], rsi
	JMP  LBB1_11

LBB1_19:
	LONG $0x247c8b4c; BYTE $0x20 // mov	r15, qword ptr [rsp + 32]
	WORD $0xff49; BYTE $0xc7     // inc	r15
	LONG $0x245c0348; BYTE $0x10 // add	rbx, qword ptr [rsp + 16]
	LONG $0x247c3b4c; BYTE $0x28 // cmp	r15, qword ptr [rsp + 40]
	JE   LBB1_29

LBB1_11:
	WORD $0x894c; BYTE $0xf9     // mov	rcx, r15
	LONG $0xccaf0f49             // imul	rcx, r12
	LONG $0x8f348d48             // lea	rsi, [rdi + 4*rcx]
	LONG $0x247c894c; BYTE $0x20 // mov	qword ptr [rsp + 32], r15
	LONG $0xf9af0f4d             // imul	r15, r9
	LONG $0x24548b48; BYTE $0x08 // mov	rdx, qword ptr [rsp + 8]
	WORD $0x3145; BYTE $0xc0     // xor	r8d, r8d
	JMP  LBB1_12

LBB1_18:
	WORD $0xff49; BYTE $0xc0     // inc	r8
	LONG $0x24540348; BYTE $0x10 // add	rdx, qword ptr [rsp + 16]
	WORD $0x394d; BYTE $0xc8     // cmp	r8, r9
	JE   LBB1_19

LBB1_12:
	WORD $0x894c; BYTE $0xc1       // mov	rcx, r8
	LONG $0xccaf0f49               // imul	rcx, r12
	LONG $0x24448b48; BYTE $0x08   // mov	rax, qword ptr [rsp + 8]
	LONG $0x88348d4c               // lea	r14, [rax + 4*rcx]
	LONG $0x380c8d4b               // lea	rcx, [r8 + r15]
	LONG $0x24448b48; BYTE $0x30   // mov	rax, qword ptr [rsp + 48]
	LONG $0x187de2c4; WORD $0x8804 // vbroadcastss	ymm0, dword ptr [rax + 4*rcx]
	LONG $0x000007b9; BYTE $0x00   // mov	ecx, 7

LBB1_13:
	LONG $0x4c10fcc5; WORD $0xe48a             // vmovups	ymm1, ymmword ptr [rdx + 4*rcx - 28]
	LONG $0xa87de2c4; WORD $0x8b4c; BYTE $0xe4 // vfmadd213ps	ymm1, ymm0, ymmword ptr [rbx + 4*rcx - 28]
	LONG $0x4c11fcc5; WORD $0xe48b             // vmovups	ymmword ptr [rbx + 4*rcx - 28], ymm1
	LONG $0x08c18348                           // add	rcx, 8
	WORD $0x394c; BYTE $0xe1                   // cmp	rcx, r12
	JB   LBB1_13
	WORD $0x894d; BYTE $0xda                   // mov	r10, r11
	QUAD $0x000000000000b848; WORD $0x0001     // movabs	rax, 281474976710656
	LONG $0x24448548; BYTE $0x18               // test	qword ptr [rsp + 24], rax
	JE   LBB1_16
	LONG $0x107a81c4; WORD $0x9e0c             // vmovss	xmm1, dword ptr [r14 + 4*r11]
	LONG $0xa979a2c4; WORD $0x9e0c             // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*r11]
	LONG $0x117aa1c4; WORD $0x9e0c             // vmovss	dword ptr [rsi + 4*r11], xmm1
	WORD $0x894d; BYTE $0xea                   // mov	r10, r13

LBB1_16:
	WORD $0x394d; BYTE $0xec // cmp	r12, r13
	JE   LBB1_18

LBB1_17:
	LONG $0x107aa1c4; WORD $0x920c             // vmovss	xmm1, dword ptr [rdx + 4*r10]
	LONG $0xa979a2c4; WORD $0x930c             // vfmadd213ss	xmm1, xmm0, dword ptr [rbx + 4*r10]
	LONG $0x117aa1c4; WORD $0x930c             // vmovss	dword ptr [rbx + 4*r10], xmm1
	LONG $0x107aa1c4; WORD $0x924c; BYTE $0x04 // vmovss	xmm1, dword ptr [rdx + 4*r10 + 4]
	LONG $0xa979a2c4; WORD $0x934c; BYTE $0x04 // vfmadd213ss	xmm1, xmm0, dword ptr [rbx + 4*r10 + 4]
	LONG $0x117aa1c4; WORD $0x934c; BYTE $0x04 // vmovss	dword ptr [rbx + 4*r10 + 4], xmm1
	LONG $0x02c28349                           // add	r10, 2
	WORD $0x394d; BYTE $0xe2                   // cmp	r10, r12
	JB   LBB1_17
	JMP  LBB1_18

LBB1_20:
	WORD $0xc984                 // test	cl, cl
	JE   LBB1_29
	WORD $0x894d; BYTE $0xd8     // mov	r8, r11
	LONG $0x01c88349             // or	r8, 1
	QUAD $0x00000000a5348d4e     // lea	r14, [4*r12]
	LONG $0x24448b48; BYTE $0x08 // mov	rax, qword ptr [rsp + 8]
	LONG $0x04c08348             // add	rax, 4
	LONG $0x24448948; BYTE $0x20 // mov	qword ptr [rsp + 32], rax
	WORD $0xc031                 // xor	eax, eax
	WORD $0x8948; BYTE $0xfb     // mov	rbx, rdi
	JMP  LBB1_22

LBB1_28:
	LONG $0x24448b48; BYTE $0x10 // mov	rax, qword ptr [rsp + 16]
	WORD $0xff48; BYTE $0xc0     // inc	rax
	WORD $0x014c; BYTE $0xf3     // add	rbx, r14
	LONG $0x24443b48; BYTE $0x28 // cmp	rax, qword ptr [rsp + 40]
	JE   LBB1_29

LBB1_22:
	WORD $0x8948; BYTE $0xc1     // mov	rcx, rax
	LONG $0xccaf0f49             // imul	rcx, r12
	LONG $0x8f148d4c             // lea	r10, [rdi + 4*rcx]
	LONG $0x24448948; BYTE $0x10 // mov	qword ptr [rsp + 16], rax
	LONG $0xc1af0f49             // imul	rax, r9
	LONG $0x247c8b4c; BYTE $0x20 // mov	r15, qword ptr [rsp + 32]
	WORD $0x3145; BYTE $0xed     // xor	r13d, r13d
	JMP  LBB1_23

LBB1_27:
	WORD $0xff49; BYTE $0xc5 // inc	r13
	WORD $0x014d; BYTE $0xf7 // add	r15, r14
	WORD $0x394d; BYTE $0xcd // cmp	r13, r9
	JE   LBB1_28

LBB1_23:
	LONG $0x280c8d4a                       // lea	rcx, [rax + r13]
	LONG $0x0410fac5; BYTE $0x8e           // vmovss	xmm0, dword ptr [rsi + 4*rcx]
	WORD $0x894c; BYTE $0xda               // mov	rdx, r11
	QUAD $0x000000000000b948; WORD $0x0001 // movabs	rcx, 281474976710656
	LONG $0x244c8548; BYTE $0x18           // test	qword ptr [rsp + 24], rcx
	JE   LBB1_25
	WORD $0x894c; BYTE $0xe9               // mov	rcx, r13
	LONG $0xccaf0f49                       // imul	rcx, r12
	LONG $0x24548b48; BYTE $0x08           // mov	rdx, qword ptr [rsp + 8]
	LONG $0x8a0c8d48                       // lea	rcx, [rdx + 4*rcx]
	LONG $0x107aa1c4; WORD $0x990c         // vmovss	xmm1, dword ptr [rcx + 4*r11]
	LONG $0xa97982c4; WORD $0x9a0c         // vfmadd213ss	xmm1, xmm0, dword ptr [r10 + 4*r11]
	LONG $0x117a81c4; WORD $0x9a0c         // vmovss	dword ptr [r10 + 4*r11], xmm1
	WORD $0x894c; BYTE $0xc2               // mov	rdx, r8

LBB1_25:
	WORD $0x394d; BYTE $0xc4 // cmp	r12, r8
	JE   LBB1_27

LBB1_26:
	LONG $0x107ac1c4; WORD $0x974c; BYTE $0xfc // vmovss	xmm1, dword ptr [r15 + 4*rdx - 4]
	LONG $0xa979e2c4; WORD $0x930c             // vfmadd213ss	xmm1, xmm0, dword ptr [rbx + 4*rdx]
	LONG $0x0c11fac5; BYTE $0x93               // vmovss	dword ptr [rbx + 4*rdx], xmm1
	LONG $0x107ac1c4; WORD $0x970c             // vmovss	xmm1, dword ptr [r15 + 4*rdx]
	LONG $0xa979e2c4; WORD $0x934c; BYTE $0x04 // vfmadd213ss	xmm1, xmm0, dword ptr [rbx + 4*rdx + 4]
	LONG $0x4c11fac5; WORD $0x0493             // vmovss	dword ptr [rbx + 4*rdx + 4], xmm1
	LONG $0x02c28348                           // add	rdx, 2
	WORD $0x394c; BYTE $0xe2                   // cmp	rdx, r12
	JB   LBB1_26
	JMP  LBB1_27

LBB1_4:
	QUAD $0x00000000a5148d4e // lea	r10, [4*r12]
	WORD $0x3145; BYTE $0xc0 // xor	r8d, r8d

LBB1_5:
	WORD $0x894d; BYTE $0xc3     // mov	r11, r8
	LONG $0xd9af0f4d             // imul	r11, r9
	LONG $0x245c8b48; BYTE $0x08 // mov	rbx, qword ptr [rsp + 8]
	WORD $0xc931                 // xor	ecx, ecx

LBB1_6:
	LONG $0x19148d4a               // lea	rdx, [rcx + r11]
	LONG $0x187de2c4; WORD $0x9604 // vbroadcastss	ymm0, dword ptr [rsi + 4*rdx]
	LONG $0x000007ba; BYTE $0x00   // mov	edx, 7

LBB1_7:
	LONG $0x4c10fcc5; WORD $0xe493             // vmovups	ymm1, ymmword ptr [rbx + 4*rdx - 28]
	LONG $0xa87de2c4; WORD $0x974c; BYTE $0xe4 // vfmadd213ps	ymm1, ymm0, ymmword ptr [rdi + 4*rdx - 28]
	LONG $0x4c11fcc5; WORD $0xe497             // vmovups	ymmword ptr [rdi + 4*rdx - 28], ymm1
	LONG $0x08c28348                           // add	rdx, 8
	WORD $0x394c; BYTE $0xe2                   // cmp	rdx, r12
	JB   LBB1_7
	WORD $0xff48; BYTE $0xc1                   // inc	rcx
	WORD $0x014c; BYTE $0xd3                   // add	rbx, r10
	WORD $0x394c; BYTE $0xc9                   // cmp	rcx, r9
	JNE  LBB1_6
	WORD $0xff49; BYTE $0xc0                   // inc	r8
	WORD $0x014c; BYTE $0xd7                   // add	rdi, r10
	LONG $0x24443b4c; BYTE $0x28               // cmp	r8, qword ptr [rsp + 40]
	JNE  LBB1_5

LBB1_29:
	LONG $0xd8658d48         // lea	rsp, [rbp - 40]
	BYTE $0x5b               // pop	rbx
	WORD $0x5c41             // pop	r12
	WORD $0x5d41             // pop	r13
	WORD $0x5e41             // pop	r14
	WORD $0x5f41             // pop	r15
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret
